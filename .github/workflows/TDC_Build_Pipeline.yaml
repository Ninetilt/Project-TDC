name: TDC_Build_pipeline

on:
  push:
    branches:
      - "*"
    paths-ignore:
      - '**/*.md' # Ignoriere Änderungen an README-Dateien
  pull_request:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/*.md' 
  workflow_dispatch:

env:
  DOTNETVERSION: 9.0.x

jobs:
  buildWindows:
    runs-on: windows-2022

    steps:
      # Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('code/TDC/mobile/TDC/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # .NET SDK installieren
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version:  '${{env.DOTNETVERSION}}'

      # Version überprüfen
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      # MAUI workloads installieren
      - name: Install .NET MAUI Workloads
        if: runner.os == 'Windows'
        shell: bash
        run: |
          dotnet workload install maui \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
          dotnet workload list

      # Workloads aktualisieren
      - name: Update Workloads
        run: dotnet workload update

      # Dependencies wiederherstellen
      - name: Restore dependencies
        run: dotnet restore code/TDC/mobile/TDC/TDC.csproj

      # Windows-Version erstellen
      - name: Build and Publish Windows App
        run: dotnet publish code/TDC/mobile/TDC/TDC.csproj -c Release -f net9.0-windows10.0.19041.0 -o ./output/windows

      # Artefakte hochladen
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: ./output/windows

  buildAndroid:  
    runs-on: windows-2022

    steps:
      # Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('code/TDC/mobile/TDC/TDC.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # .NET SDK installieren
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version:  '${{env.DOTNETVERSION }}'

      # Version überprüfen
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      # MAUI workloads installieren
      - name: Install .NET MAUI Workloads
        if: runner.os == 'Windows'
        shell: bash
        run: |
          dotnet workload install maui android wasm-tools \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet9/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
          dotnet workload list

      # Dependencies wiederherstellen
      - name: Restore nuget packages
        run: dotnet restore code/TDC/mobile/TDC/TDC.csproj

      # Android publishen
      - name : Build Android App
        shell: bash
        run: dotnet publish code/TDC/mobile/TDC/TDC.csproj -c:Release -f:net9.0-android -o:output/android --no-restore

      # Tests ausführen
      - name: Run tests
        run: dotnet test --no-build --configuration Release ./code/TDC/mobile/TDC/TDC.csproj

      # Build-Artefakte hochladen
      - name: Upload Android Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-artifact
          path: ./output/android


  buildBackend:
    runs-on: windows-2022

    steps:
      # Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache NuGet packages
      - name: Cache NuGet packages for Backend
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('code/TDC/backend/TDC.Backend/TDC.Backend.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # .NET SDK installieren
      - name: Setup .NET SDK ${{ env.DOTNETVERSION }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{ env.DOTNETVERSION }}'

      # Version überprüfen
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      # Dependencies wiederherstellen
      - name: Restore Backend dependencies
        run: dotnet restore code/TDC/backend/TDC.Backend/TDC.Backend.csproj

      # Backend bauen
      - name: Build backend project
        run: dotnet publish code/TDC/backend/TDC.Backend/TDC.Backend.csproj -c Release -o ./output/backend --no-restore

      # Build-Artefakte hochladen
      - name: Upload Backend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-artifact
          path: ./output/backend

      # Backend-Tests ausführen 
      - name: Run backend tests
        run: dotnet test code/TDC/TDC-Backend.Test/TDC.Backend.Test.csproj --configuration Release --logger "junit;LogFilePath=./output/backend-test-results/backend-unit-tests.xml"

      # Upload der Backend-Testergebnisse
      - name: Upload Backend Unit Test Results
        uses: actions/upload-artifact@v4
        with:
          name: backend-unit-test-results
          path: code/TDC/TDC-Backend.Test/output/backend-test-results/backend-unit-tests.xml
      
