```yaml
name: TDC_Build_pipeline

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/*.md' # Optional: Ignoriere Änderungen an README-Dateien
  pull_request:
    branches:
      - main
      - dev
    paths-ignore:
      - '**/*.md' # Optional: Ignoriere Änderungen an README-Dateien
  workflow_dispatch:

env:
  DOTNETVERSION: 8.0.x

jobs:
  buildWindows:
    runs-on: windows-2022

    steps:
      # Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('code/TDC/mobile/TDC/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # .NET SDK installieren
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version:  '${{env.DOTNETVERSION }}'

      #Version überprüfen
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      # MAUI workloads installieren
      - name: Install .NET MAUI Workloads
        if: runner.os == 'Windows'
        shell: bash
        run: |
          dotnet workload install maui \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
          dotnet workload list

      # Workloads aktualisieren
      - name: Update Workloads
        run: dotnet workload update

      # Dependencies wiederherstellen
      - name: Restore dependencies
        run: dotnet restore code/TDC/mobile/TDC/TDC.csproj

      # Windows-Version erstellen
      - name: Build and Publish Windows App
        run: dotnet publish code/TDC/mobile/TDC/TDC.csproj -c Release -f net8.0-windows10.0.19041.0 -o ./output/windows

  buildAndroid:
    runs-on: windows-2022

    steps:
      # Repo auschecken
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('code/TDC/mobile/TDC/TDC.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # .NET SDK installieren
      - name: Setup .NET SDK ${{env.DOTNETVERSION}}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version:  '${{env.DOTNETVERSION }}'

      #Version überprüfen
      - name: List installed .NET info
        shell: pwsh
        run: dotnet --info

      # MAUI workloads installieren
      - name: Install .NET MAUI Workloads
        if: runner.os == 'Windows'
        shell: bash
        run: |
          dotnet workload install maui android wasm-tools \
            --source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet8/nuget/v3/index.json \
            --source https://api.nuget.org/v3/index.json
          dotnet workload list

      # Dependencies wiederherstellen
      - name: Restore nuget packages
        run: dotnet restore code/TDC/mobile/TDC/TDC.csproj

      #Android publishen
      - name : Build Android App
        shell: bash
        run: dotnet publish code/TDC/mobile/TDC/TDC.csproj -c:Release -f:net8.0-android -o:output/android --no-restore

      #Tests ausführen
      - name: Run tests
        run: dotnet test --no-build --configuration Release ./code/TDC/mobile/TDC/TDC.csproj
```
